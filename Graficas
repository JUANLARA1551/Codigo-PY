import numpy as GF
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Parámetros
constante = -7.144e-4
valor_inicial = 1.5
tiempo_inicial, tiempo_final = 0, 3600
paso_tiempo = 200

# EDO
def modelo(tiempo, altura):
    return constante / (3*GF.sqrt(altura) - altura**1.5)

# Solución exacta
tiempo_referencia = GF.linspace(tiempo_inicial, tiempo_final, 500)
solucion_referencia = solve_ivp(modelo, [tiempo_inicial, tiempo_final], [valor_inicial], t_eval=tiempo_referencia)
altura_referencia = solucion_referencia.y[0]

# Métodos numéricos genéricos
def euler_simple(funcion, tiempo_inicial, altura_inicial, paso, tiempo_final):
    tiempo, altura = [tiempo_inicial], [altura_inicial]
    while tiempo[-1] < tiempo_final:
        altura.append(altura[-1] + paso * funcion(tiempo[-1], altura[-1]))
        tiempo.append(tiempo[-1] + paso)
    return GF.array(tiempo), GF.array(altura)

def euler_mejorado(funcion, tiempo_inicial, altura_inicial, paso, tiempo_final):
    tiempo, altura = [tiempo_inicial], [altura_inicial]
    while tiempo[-1] < tiempo_final:
        k1 = funcion(tiempo[-1], altura[-1])
        k2 = funcion(tiempo[-1] + paso, altura[-1] + paso*k1)
        altura.append(altura[-1] + (paso/2)*(k1 + k2))
        tiempo.append(tiempo[-1] + paso)
    return GF.array(tiempo), GF.array(altura)

def runge_kutta_4(funcion, tiempo_inicial, altura_inicial, paso, tiempo_final):
    tiempo, altura = [tiempo_inicial], [altura_inicial]
    while tiempo[-1] < tiempo_final:
        k1 = funcion(tiempo[-1], altura[-1])
        k2 = funcion(tiempo[-1] + paso/2, altura[-1] + paso*k1/2)
        k3 = funcion(tiempo[-1] + paso/2, altura[-1] + paso*k2/2)
        k4 = funcion(tiempo[-1] + paso, altura[-1] + paso*k3)
        altura.append(altura[-1] + (paso/6)*(k1 + 2*k2 + 2*k3 + k4))
        tiempo.append(tiempo[-1] + paso)
    return GF.array(tiempo), GF.array(altura)

# Soluciones numéricas
tiempo_euler, altura_euler = euler_simple(modelo, tiempo_inicial, valor_inicial, paso_tiempo, tiempo_final)
tiempo_euler_mejorado, altura_euler_mejorado = euler_mejorado(modelo, tiempo_inicial, valor_inicial, paso_tiempo, tiempo_final)
tiempo_rk4, altura_rk4 = runge_kutta_4(modelo, tiempo_inicial, valor_inicial, paso_tiempo, tiempo_final)

# Graficar
metodos = [
    ("Euler", tiempo_euler, altura_euler, 'bo--'),
    ("Euler Mejorado", tiempo_euler_mejorado, altura_euler_mejorado, 'gs--'),
    ("Runge-Kutta 4", tiempo_rk4, altura_rk4, 'md--')
]

plt.figure(figsize=(8, 10))
for indice, (titulo, tiempo_x, altura_x, estilo) in enumerate(metodos, start=1):
    plt.subplot(3, 1, indice)
    plt.plot(tiempo_referencia, altura_referencia, 'r-', label='Exacta', linewidth=2)
    plt.plot(tiempo_x, altura_x, estilo, label=titulo)
    plt.xlabel('Tiempo (s)')
    plt.ylabel('Altura (m)')
    plt.title(titulo)
    plt.legend()
    plt.grid(True)

plt.tight_layout()
plt.show()
